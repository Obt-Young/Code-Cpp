//将类对象传递给函数时，一般使用引用(实际上，引用的引入就是用来服务于 “类” 和 “结构”)
//如果返回值申明为引用，那么返回的将是某个指定的"变量"、“类”或者"结构"，而不是这些值的一份"拷贝"
//小结：1.引用提供了直接操作原变量的途径，使用引用的地方就不存在“按值传递”，所有的一切都是直接传递变量
//	2.所有对引用变量的修改都将直接影响原值，主要也就是用在函数中，因为只有函数才存在"传值不传变量"的情况


引用参数的使用场景：
为什么使用引用参数？
1.可修改入参的值，而不是只能修改其"拷贝"  (函数相关)
2.通过引用参数来使用结构体和类，可以有效的提高运行速度  (非函数相关)

当在函数中只使用入参的值，而不需要修改入参时(就是C的那一套，传值不传变量)，该如何选择？
1.如果传的值占内存不大，比如就是一个int，long什么的，那么建议直接传值(就是普通的C函数模式)
2.如果传的是数组，那么使用指针作为入参，又因为前提是不需要修改，那么可以再做一个约束，const指针，其实这也是唯一的方案，引用无法修饰数组！！！
3.如果传的值占内存很大，大结构体，那么建议使用const 指针或者const 引用(同2，const的意思是前提不需要修改，下面都是这个意思，不再赘述)
4.如果传的值是类对象，那么使用const 引用，c++设计引用就是用来解决类值传递的，当然const是用来保护"只传值"这个大前提

当函数需要修改入参的变量的值时，该如何选择?
1.如果是基本数据类型，那么是用指针，就是C的那一套，传个地址值进去，让其对地址值做*动作，从而修改地址内的值
2.如果是数组，同上，只能用指针
3.如果是结构，指针或者引用
4.如果是类，只能引用



#1  -  编写代码文件时的拆分思路：
.h文件中包含属性域和方法声明，.c文件中包含方法的实现。这样在使用此文件提供的方法的时候，只要包含.h头文件即可。这也是一种“面向对象”的设计思路。
包含头文件意味着在预编译的时候声明了属性域，并且声明了方法，那么在链接的时候就不存在找不到符号表的问题，但是这里需要避免重复include，方法就是
???.c
#include xxx.h

xxx.h
#ifndef _XXX_H
#define _XXX_H
...
...
...
...
#endif

不要在头文件中声明变量，头文件中仅用来定义变量类型就好，千万不要出现某个实实在在的变量，比如可以定义结构体，定义枚举类型，定义联合体，但是
不要在其中声明某个结构体实例。因为会导致变量重复定义的情况出现。

头文件中一般包含如下内容：函数声明，使用#define和const定义的常量，结构体声明，类声明，模板声明，内联函数
总之一句话，不要在头文件中出现任何格式的“实例”，头文件只做声明用。
PS：由于const的特殊链接性质，可以在头文件中定义(具体是什么样的性质？)


#2  -  编译的兼容性
C++标准允许每个编译器设计人员自定义名称符号表(symbol table)中条目的格式，因此由不同编译器对相同源文件实施编译的最终结果可能是不一样的，因为
符号表的格式不通，比如func函数，在通用编译器输出的符号表中是func，而在yk自定义的编译器输出的符号表中是func_yk，这样在链接时就会出现互相找不到
的问题，虽然他们代表的代码逻辑都是一样的。
因此，尽量整个工程编译；如果无法整个工程编译，那么就用objdump命令逐条核实二进制文件的符号表；亦或者，确认各个二进制文件的编译器使用的是同一个。


#3  -  编译器会提供栈容编译选项

#4  -  c++提供了作用域解析运算符 ::  ,  如果有全局变量a和局部变量a，那么在函数栈中使用 ::a来使用a的全局变量版本

#5  -  程序越能避免对数据进行不必要的访问，就越能保证数据的完整性，因此尽量把变量的作用域收缩到适合其使用的范围。

#6  - 9.2.5 

#1  ---  c++中c开头的头文件名，都对应c中相应的头文件，比如c++中的cmath.h就对应c中的math.h

#2  ---  c++中回车的作用和空格/TAB是一样的，因为c++是以分号作为语句结束的，因此当字符串操作时，如果字符串很长，那么直接换行再写的话，不会有影响

#3  ---  对于变量，有些语言是在使用时自动声明，但是c语系要求先声明后使用，这有个好处就是避免误拼造成的排查问题难，因为可能两个很相近的单词，自己拼错了以后就出现了两个变量，而自己不知道

#4  ---  预编译的时候用处理头文件，因此gcc -E的时候需要通过-I来指定头文件查找路径
	 链接的时候需要各个库，因此gcc -o的时候需要通过-L或者-l来指定库文件查找路径
		(注：要区分开，因为我们在编译的时候的时候都是一条gcc搞定，这个细节要注意)

#5  ---  面向对象编程的本质是“设计自己的数据类型”

#6  ---  c++11 经常使用大括号{}来进行数据的初始化，这种初始化成为“列表初始化”，名字的由来是因为常使用这个方法来给复杂的数据类型提供数据列表

#7  ---  强制类型转换：强制类型转换不会改变原变量的值，而是创建一个新的指定类型的值，以便使用。
	 语法和c一样，比如(int) a，此外还提供c++风格，比如int (a)。

     此外，c++还提供四个强制类型转换运算符：
	1）static_cast<> ， 比如：static_cast<int> a ，此运算返回a的int类型数值(注意，这里是返回数值，相当于创建一个副本返回，而非改变原值)
		注；传统的c语言格式的转换比较危险，使用static_cast<>运算符更加安全
	2）??书中没介绍
	3）??书中没介绍
	4）??书中没介绍

#8  --- sizeof，用来求字节数，sizeof某个数组，获得的是整个数组占用的字节数，如果是char类型数组，那么就是数组元素个数，如果是int数组，那么
	就是4*数组元素个数

#9  --- 初始化：
	如果一个变量在定以后就需要给值，那么建议使用初始化模式，而不是“先定义，再赋值”的模式。主要是因为先定义再赋值时，中间会有一个值未定
	的时间段存在

	数组的初始化：int a[10]={1,2,3,4,5,6,8};  //依次取大括号里的值，没赋值的数组元素会被初始化为0

	在c和c++中，初始化语句的格式都是大括号 {},包括结构体的初始化也一样：
			struct s_a{
				int i_a;
				float f_a;
				char c_a;
			}
			struct s_a a={1,1.0,'1'}

	又有结构体数组的初始化如下,也是采用大括号的模式：
			struct s_a a_a[2]={
						{1,1.0,'1'},
						{2,2.0,'2'}
					   }
	主要思想就是，大括号括起来，然后每个元素都用逗号隔开

#10  --- 位字段：
	 和c语言一样，c++中也有位字段：
		struct i_Bit{
			int a:1		//int类型的a，占一个bit，所以取值范围就是 0 或者 1，而且是int的0和1
			int b:2		//int类型的b，占两个bits，所以取值范围是0，1,2,3
			bool is_a:1	//同上,在c++中bool的值只能是0或者1
		}

#11  --- 









引用虽然是 使用 指针来实现的，但是在使用上和指针有着很大的区别
(可能在实现上加了很多包装，比如引用只能在定义时就赋值，很可能是因为是一个常指针)

引用和指针的三大区别：
1）引用不能是空，即创建时就要有初值
2）引用必须初始化，同1）
3）引用永远指向初始化时的那个变量
	汇总：引用必须在使用时就初始化，而这种初始化必须是一个类型匹配的变量


继续强调：
1）引用必须指向已经创建出来的变量，即引用必须指向内存中某个实实在在存在的且有符号的区域。(引用不接受画饼)
2）引用的值一旦确定则不能更改(嫁鸡随鸡，嫁狗随狗)
3）引用在函数传参的时候，传的是类地址(不是地址的用法，但是本质是地址)，而不是值(引用的指针特性在此表现)


引用的const特点
double &a = 12.3 	//不行
const double &a = 12.3	//可以

假想：
以上的例子说明：引用真的是指针
12.3常量被存放在.data段，这段的访问是只读的，即cosnt，因此指向这段区域的指针也应当是const xxx的，所以，引用
也应当使用const xxx来修饰

实际：
const double &a =12.3 的时候，会默认创建一个临时变量来存放12.3，然后用a来指向这个临时变量。

使用如下代码查看编译后的符号表

const int &yangkun = 12.3;

int main(int argc,char ** argv)
{
}

0000000000601044 l     O .data  0000000000000004              _ZGR7yangkun0			//这里就是临时创建的变量
000000000040073a l     F .text  0000000000000015              _GLOBAL__sub_I_yangkun		//？？？
0000000000601050 g     O .bss   0000000000000008              yangkun				//引用在bss段


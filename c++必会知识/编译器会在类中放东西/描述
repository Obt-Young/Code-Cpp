一个类如果有虚函数，那么编译器会为每一个实例都插入一个指向虚函数表的指针。根据平台的不同，这个指针在内存中
的位置也不同。

(*)不管类的数据成员声明顺序如何，编译器都会自己重新安排它们在内存中的布局，这里和struct完全不一样

考虑到内存布局的不可控，“一定不要”使用例如memcpy这样操作内存的函数去操作类。

同时，对于类的操作一定不要涉及到内存层面，就应当当做java那样，就是简单的赋值，不要自作聪明地试图解析内存布局，因为
不同编译器在处理的时候策略不同




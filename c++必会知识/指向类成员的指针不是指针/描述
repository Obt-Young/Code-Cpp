语法:   int classname::* p_m_uid;			//创建一个指向类的成员变量的指针
含义:   指向类的成员变量的指针是 针对 “类”，而不是针对“对象” (有点和静态成员函数类似，是类范畴，而不是某个实例范畴)，由于其指向的是"类"的成员，
	而不是“对象”的成员，所以其中存放的“不是地址值”，所以对其引用不会普通指针那样获取值，而是获取一个偏移量，这个偏移量表示：”当前的成员变量
	距离本对象的首地址有多少个字节的距离“。
意义:	当使用c++做底层编程的时候应该很有用，看起来主要是用来规划内存的
用法:	正如上文描述，对非static成员变量的指针做引用时，获得的是一个int的返回值，这个值为字节数，表示的是距离类首地址的字节数
		      对static成员变量的指针做引用时，获得的是确确实实的”地址值“，表示的是当前static成员存放在内存中的那个位置(这是个例外)

注意:	在使用时，和普通指针存在区别，使用时要把*加上
	比如有：
			class myclass{
				int m_a;	
			}

			myclass c;		// 一个myclass对象
			myclass *p = &c;		// 一个指向c的指针，c是一个myclass对象
			int myclass::*p_m_a;	//一个指向myclass中m_a的指针
			p_m_a = &c::m_a;	//p_m_a指向myclass类的m_a成员变量
			int offset = c.*p_m_a;		//获取m_a在实例c中的偏移地址(注意，这里p_m_a不是c的内部成员，所以使用的使用不是 *c.p_m_a,这也是为什么使用.*这么奇怪表示方法的原因)
			int *address = 	p->*p_m_a;	//同上

#1   ---   c++和QML结合使用：
		1）思路：a.把c++类注册到QML中，成为一个QML类，再通过QML来创建和使用
			 b.把c++类实例化一个实例，然后把这个实例传给QML，QML直接使用对这个实例操作
		    小结：不论如何，都是把c++代码做成封装，给QML调用，这个和QML语言的实现思路是一致的，都是通过c++写底层，然后中间封装一层，再提供QML接口，
                          起始也就“相当于自己扩展开发QML语言了”

		2）准备：a.在c++类必须继承Qobject类
			 b.在c++类的开头必须使用Q_OBJECT宏

=========================================================================================================================================================

#2   ---   手段：1）通过信号和槽  互相关联
			 QML中有信号和槽，c++中也有信号和槽。而且QML和c++的信号和槽是互通的，那么就可以用这个机制来做关联。
			 在QML中注册信号和槽，来对应c++中的槽和信号。
				QML	 c++
				信号-----槽
				槽-------信号

		 2）通过Q_INVOKABLE宏  使用c++类方法
			凡是被此宏修饰的public成员方法都可以在QML中使用，使用方法就是  类名.方法

		 3）通过Q_ENUMS宏  使用c++类的枚举成员变量
			凡是被此宏处理过的枚举类型，都可以在QML中使用，方法为  类名.枚举的值  (这里不是 类名.枚举类型名.枚举的值)(那如果修饰了多个枚举类型怎么办？)

		 4）

=========================================================================================================================================================

#3   ---   如何在一个qml文件中使用另外一个qml文件定义的对象？

	   有类A和类B，类A描述了一个金字塔，类B描述了一块砖，金子塔是要砖块的，因此砖块可以再金字塔的qml中描述，这时候需要使用Component类来定义砖，然后在使用的时候
	   只要使用其id即可，因为这个时候砖块已经是有实例的了。当然在使用的时候还可以顺便给他修饰修饰(调整一些属性)。

           如果这个砖的qml很大，而且很独立，那么就可以把它独立出来形成单独的“qml文件”，而不是寄生在金字塔qml文件中。这个时候同样使用Component类，但是在书写的时候
	   可以把Component忽略掉，而是直接定义内容，但是此时的qml文件名第一个字母要大写，一旦定义好，这个东西就可以直接使用了，和Button什么的一样，而且在定义的时候
	   可以给一些默认值，后面实例化的时候这些值是出厂就有的，当然也可以对这些值做修改

			参见:动态加载

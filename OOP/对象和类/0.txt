#0  -  OOP相对于面向过程的主要特性：
		1）抽象
		2）封装和数据隐藏
		3）多态
		4）继承
		5）代码重用

#1  -  “隐藏数据”是OOP的主要目标之一，这也是java有bean思想的原因之一(把属性都设置成private的，然后通过方法对其进行设置和读取)。

#2  -  类成员默认是private的，而不是public的，这点要注意(java里面默认是protected的)。建议不要使用默认情况，全指明为好。

#3  -  面向对象编程思想的一个宗旨————“通过方法来获取属性值，而不是直接访问属性值，可理解为以’方法‘主导的编程”

#4  -  C++中结构体的定位：仅仅表示数据，即结构体中不要有函数指针，只能有属性值。(C++中的类相当于原C的结构体，c++的结构体相当于c的缩水版结构体)。
       (c++中结构体可以有函数指针，只是不建议这样用)

#5  -  c++类中方法的实现，必须在方法前面加上类名和::  比如：
	int fun::func(void)
	{
		return 0;
	}
	fun是类名
	在声明的时候不需要指定，比如：
	class fun{

	public:
		int func(void);
	}

#6  -  小结：c和c++在函数声明上没有区别，仅在函数实现上有一个区别————“方法名前面需要加类名和::”,其他没差别。

#7  -  隐藏内部机制，强调动作的实质(目的)，是OOP的另一个重要思想

#8  -  运算符重载：c++可以通过定义方法的形式对运算符进行重定义。
       和函数重载一样，在存在运算符重载的情况下，编译器回去判断运算符的运算数，进而判断应该使用运算符的哪种实例

#9  -  重载运算符的限制： 1  -  重载运算符(尽量)不要违背原运算符的含义，比如把加法重载成减法，这他妈神经病才干的事
                          2  -  重载运算符无法调整优先级，优先级同原运算符一致
                          3  -  不能创建新的运算符，比如**之类的
                          4  -  有些运算符不能被重载，具体上网搜去
                          5  -  大部分运算符可以通过非成员函数进行重载，但是有些运算符必须通过成员函数进行重载(保险起见，都通过成员函数重载好了，这样的话也很好的缩小了重载运算符的作用范围)

#10  - 友元分为三类：友元函数、友元类和友元成员函数
       可见主要针对函数和类
       友元关键字friend只出现在函数声明中，而不应该出现在实现中 
